# GitHub Actions Workflow for Portfolio Website CI/CD
name: Build and Deploy to AKS

on:
  push:
    branches:
      - main  # EDIT: Triggers on push to main branch
  pull_request:
    branches:
      - main
  workflow_dispatch:  # EDIT: Allows manual trigger from GitHub UI

env:
  IMAGE_NAME: portfolio-website
  # EDIT: These reference GitHub Secrets - ensure they're configured

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # FIND: This uses the AZURE_CREDENTIALS secret you created

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          # FIND: These use ACR secrets you created

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                       -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
        # EDIT: Builds image with commit SHA and 'latest' tag

      - name: Push Docker image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        # FIND: Pushes both tagged images to Azure Container Registry

      - name: Display image information
        run: |
          echo "Image pushed successfully!"
          echo "Image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Latest: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-aks:
    name: Deploy to Azure Kubernetes Service
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        # FIND: This configures kubectl to use your AKS cluster

      - name: Update deployment image
        run: |
          kubectl set image deployment/portfolio-deployment \
            portfolio-website=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        # EDIT: Updates the deployment with new image

      - name: Rollout status
        run: |
          kubectl rollout status deployment/portfolio-deployment
        # FIND: Waits for deployment to complete

      - name: Get deployment status
        run: |
          kubectl get deployment portfolio-deployment
          kubectl get pods -l app=portfolio
          kubectl get service portfolio-service

      - name: Get LoadBalancer IP
        id: get-ip
        run: |
          PUBLIC_IP=$(kubectl get service portfolio-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "Public IP: $PUBLIC_IP"
        # FIND: Retrieves the public IP of your website

      - name: Deployment Summary
        run: |
          echo "================================================"
          echo "Deployment completed successfully!"
          echo "================================================"
          echo "Image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Website URL: http://${{ steps.get-ip.outputs.PUBLIC_IP }}"
          echo "================================================"
